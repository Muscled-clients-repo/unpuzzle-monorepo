"use client";
import { Geist, Geist_Mono } from "next/font/google";
import type { Metadata } from "next";
import "../assets/globals.css";
// import Header from "./Header";
import { Provider, useSelector } from "react-redux";
import store, { RootState } from "../redux/store";
import userReducer from "../redux/features/user/userSlice";
import Sidebar from "../components/Sidebar";
import LoadingSpinner from "../components/shared/Loading";
import React, { useState, useEffect } from "react";
import { usePathname } from "next/navigation";
import ClientOnly from "../components/shared/ClientOnly";
import AnnotationHeader from "../components/screens/AnnotationHeader";
import { ToastContainer } from "react-toastify";
import { AuthInitializer } from "../components/AuthInitializer";

// clerk
// import { ClerkProvider } from "@clerk/nextjs";
import {
  OptionalSignedIn,
  OptionalSignedOut,
  OptionalUserButton,
  OptionalSignInButton,
  OptionalSignUpButton,
  OptionalRedirectToSignIn,
} from "../components/OptionalClerkComponents";

const geistSans = Geist({
  subsets: ["latin"],
  display: "swap",
});

const geistMono = Geist_Mono({
  subsets: ["latin"],
  display: "swap",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

function LayoutContent({ children }: { children: React.ReactNode }) {
  const { user } = useSelector((state: RootState) => state.user);
  const [loading, setLoading] = useState<boolean>(true);
  const pathname = usePathname();

  // In your layout or any server component
  console.log(
    "CLERK_SECRET_KEY:",
    process.env.CLERK_SECRET_KEY?.substring(0, 10) + "..."
  );
  console.log(
    "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:",
    process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY?.substring(0, 10) + "..."
  );

  useEffect(() => {
    // Content will not be displayed if loading is always true.
    setLoading(false);
  }, []);

  // Paths without Sidebar
  const noSidebarPaths = [
    "/student-annotations",
    "/teacher-annotations",
    "/confusions-puzzlejourney",
    "/annotations-puzzlejourney",
  ];

  // Only show sidebar on these routes (exact or as prefix)
  const sidebarAllowedPaths = [
    "/editor",
    "/courses",
    "/my-assets",
    "/videos",
    "/settings",
  ];
  const showSidebar = sidebarAllowedPaths.some((path) =>
    pathname.startsWith(path)
  );

  // Show AnnotationHeader for specific paths
  const showAnnotationHeader = noSidebarPaths.includes(pathname);
  console.log("user from sidebar: ", user);
  return (
    <>
      <main>
        <div className="flex h-screen">
          {/* Sidebar */}
          {user && showSidebar && <Sidebar user={user} />}
          <div className="flex-grow bg-white text-black flex flex-col h-full">
            {/* Annotation Header */}
            {showAnnotationHeader && (
              <div className="sticky top-0 z-50">
                <ClientOnly fallback={null}>
                  {() => <AnnotationHeader />}
                </ClientOnly>
              </div>
            )}

            {/* Scrollable Children Section */}
            <div className="overflow-scroll min-h-[90vh] light">
              {loading ? <LoadingSpinner /> : children}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const skipAuth = process.env.NEXT_PUBLIC_SKIP_AUTH === "true";

  if (skipAuth) {
    console.log("[Layout] Authentication skipped - Clerk provider disabled");
    return (
      <html
        lang="en"
        className={`${geistSans.className} ${geistMono.className} overflow-hidden`}
      >
        <body className="antialiased light">
          <ToastContainer />
          <Provider store={store}>
            <AuthInitializer />
            <LayoutContent>{children}</LayoutContent>
          </Provider>
        </body>
      </html>
    );
  }

  return (
    // <ClerkProvider>
    <html
      lang="en"
      className={`${geistSans.className} ${geistMono.className} overflow-hidden`}
    >
      <body className="antialiased light">
        <ToastContainer />
        <Provider store={store}>
          <AuthInitializer />
          <LayoutContent>{children}</LayoutContent>
        </Provider>
      </body>
    </html>
    // </ClerkProvider>
  );
}
